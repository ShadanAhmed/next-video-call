import Head from "next/head";
import { useState, useEffect } from "react";
import Agora, { RtcTokenBuilder, RtmTokenBuilder } from "agora-access-token";
import { useRouter } from "next/router";
import { db } from "../utils/firebase";
import useFirestore from "../hooks/useFirestore";
import Constants from "../utils/Constants";

export default function Home({ user }) {
  console.log("user", user);
  const [channel, setChannel] = useState("");

  const { updateChannel } = useFirestore(db);

  const router = useRouter();

  const generateMeetingCode = () => {
    let meetingCode = "";
    const alphabets = "abcdefghijklmnopqrstuvwxyz";
    // generate random alphabet
    for (let i = 1; i <= 3; i++) {
      meetingCode += alphabets[Math.floor(Math.random() * alphabets.length)];
    }
    meetingCode += "-";
    for (let i = 1; i <= 4; i++) {
      meetingCode += alphabets[Math.floor(Math.random() * alphabets.length)];
    }
    meetingCode += "-";
    for (let i = 1; i <= 3; i++) {
      meetingCode += alphabets[Math.floor(Math.random() * alphabets.length)];
    }
    return meetingCode;
  };

  const createMeeting = () => {
    const generatedChannel = generateMeetingCode();
    const appId = "eaba463a5db445fda89361ca451604e3";
    const appCertificate = "697bd8f3d2a547c9b9a05d2c8e981d72";
    const expiresAt = Math.floor(Date.now() / 1000) + 2 * 60 * 60;

    const token = RtcTokenBuilder.buildTokenWithUid(
      appId,
      appCertificate,
      generatedChannel,
      user.uid,
      Agora.RtcRole.PUBLISHER,
      expiresAt
    );
    let rtmToken = RtmTokenBuilder.buildToken(
      appId,
      appCertificate,
      user.uid,
      Agora.RtcRole.PUBLISHER,
      expiresAt
    );

    updateChannel(generatedChannel, {
      channel: generatedChannel,
      token: token,
      rtmToken: rtmToken,
      createdBy: user.uid,
      timestamp: Date.now(),
    });
    router.push(`/${channel ? channel : generatedChannel}`);
  };

  return (
    <div>
      <Head>
        <title>React video call</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="bg-gray-100 h-screen">
        <div class="mb-4 relative items-center justify-center flex">
          <div className="w-1/3 m-10 flex h-12 ">
            <button
              class="w-1/2 text-white bg-indigo-500 border-0 py-2 px-6 focus:outline-none hover:bg-indigo-600 rounded text-lg"
              onClick={createMeeting}
            >
              New meeting
            </button>

            <input
              type="channel"
              id="channel"
              name="channel"
              class="ml-4 flex-row-reverse w-full bg-white rounded border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
              placeholder="Enter a code"
              onChange={(event) => {
                setChannel(event.target.value);
              }}
              onSubmit={(event) => {
                event.preventDefault();
                router.push(`/${channel ? channel : generatedChannel}`);
              }}
            />
          </div>
        </div>
      </div>
    </div>
  );
}
